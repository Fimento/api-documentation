openapi: 3.0.0
info:
  title: Fimento Partner API
  version: 1.0.0
  description: |
    The Fimento Open API can be used by Fimento's partners in order to provide financial products to their end customers within their own application/website.

    # Test objects
    Test objects can be used in the staging environment in order to test specific flows. If one of the organsiation of the application has its `organisationNumber` equal to one of the test object, the `applicationStatus` returned by Fimento for the create application endpoint will always be the same one as described in the following table:
    Organisation Number|Application Status
    ----------------------|------------------
    Undefined or anything but the below |`granted`
    2222222 |`refer`
    1111111 |`denied`
servers:
- url: https://api.fimento.com/
  description: Production server
- url: https://api.stage.fimento.com/
  description: Staging server

paths:
  /application/customer:
    post:
      tags:
      - Application endpoints
      summary: Create a customer
      description: Create a customer and return its credit information
      requestBody:
        $ref: "#/components/requestBodies/customerApplication"
      responses:
        200:
          $ref: "#/components/responses/extendedApplication"
      security:
        - oAuth2ClientCredentials: []

  /application/customer/{customerApplicationId}:
    get:
      tags:
      - Application endpoints
      summary: Get a customer application
      description: Fetch a customer application
      parameters:
      - name: customerApplicationId
        in: path
        description: Customer application's id as set in the customer application response object
        required: true
        schema:
          type: string
      responses:
        200:
          $ref: "#/components/responses/extendedApplication"
        400:
          $ref: "#/components/responses/dataError"
        401:
          $ref: "#/components/responses/authError"
        404:
          $ref: "#/components/responses/notFoundError"
        500:
          $ref: "#/components/responses/serverError"
      security:
      - oAuth2ClientCredentials: []

  /application/order:
    post:
      tags:
      - Application endpoints
      summary: Create an order application
      description: Send a new application for an order to be created in the system, and run decision rules
      requestBody:
        $ref: "#/components/requestBodies/createOrderApplication"
      responses:
        200:
          $ref: "#/components/responses/orderApplicationGetSuccess"
        400:
          $ref: "#/components/responses/dataError"
        401:
          $ref: "#/components/responses/authError"
        500:
          $ref: "#/components/responses/serverError"
        503:
          $ref: "#/components/responses/serviceError"
      security:
      - oAuth2ClientCredentials: []

  /application/order/{applicationId}/mark-as-confirmed:
    put:
      tags:
      - Application endpoints
      summary: Confirm an order application
      description: This endpoint can be used to notify Fimento when the customer decides to confirm an application and generate the order in Fimento system.
      parameters:
      - name: applicationId
        in: path
        description: Application's id
        required: true
        schema: {}
      responses:
        204:
          $ref: "#/components/responses/markAsConfirmedSuccess"
        400:
          $ref: "#/components/responses/dataError"
        401:
          $ref: "#/components/responses/authError"
        500:
          $ref: "#/components/responses/serverError"
        503:
          $ref: "#/components/responses/serviceError"
      security:
      - oAuth2ClientCredentials: []

  /application/order/{applicationId}:
    get:
      tags:
      - Application endpoints
      summary: Get Application
      description: Fetch an application
      parameters:
      - name: applicationId
        in: path
        description: Application's id
        required: true
        schema:
          type: string
      responses:
        200:
          $ref: "#/components/responses/orderApplicationGetSuccess"
        400:
          $ref: "#/components/responses/dataError"
        401:
          $ref: "#/components/responses/authError"
        404:
          $ref: "#/components/responses/notFoundError"
        500:
          $ref: "#/components/responses/serverError"
      security:
      - oAuth2ClientCredentials: []

  /order/{accountId}:
    get:
      tags:
      - Order endpoints
      summary: Get Order
      description: Fetch an order
      parameters:
      - name: accountId
        in: path
        description: Order's id
        required: true
        schema:
          type: string
      responses:
        200:
          $ref: "#/components/responses/orderGetSuccess"
        400:
          $ref: "#/components/responses/dataError"
        401:
          $ref: "#/components/responses/authError"
        404:
          $ref: "#/components/responses/notFoundError"
        500:
          $ref: "#/components/responses/serverError"
      security:
      - oAuth2ClientCredentials: []

  /entity/{customerId}:
    get:
      tags:
      - Customer endpoints
      summary: Get Customer
      description: Fetch a customer
      parameters:
      - name: customerId
        in: path
        description: Customer's id
        required: true
        schema:
          type: string
      responses:
        200:
          $ref: "#/components/responses/customerGetSuccess"
        400:
          $ref: "#/components/responses/dataError"
        401:
          $ref: "#/components/responses/authError"
        404:
          $ref: "#/components/responses/notFoundError"
        500:
          $ref: "#/components/responses/serverError"
      security:
      - oAuth2ClientCredentials: []

  /invoice/{invoiceId}/download:
    get:
      tags:
      - Invoices
      summary: Get Download Link For Invoice
      parameters:
      - name: invoiceId
        in: path
        description: Invoice id as set in the order response object
        required: true
        schema:
          type: string
      responses:
        200:
          $ref: "#/components/responses/extendedApplication"
        400:
          $ref: "#/components/responses/dataError"
        401:
          $ref: "#/components/responses/authError"
        404:
          $ref: "#/components/responses/notFoundError"
        500:
          $ref: "#/components/responses/serverError"
      security:
        - oAuth2ClientCredentials: []

  /upload/payment-file/:
    post:
      tags:
      - Payments
      summary: Register Payments
      responses:
        200:
          $ref: "#/components/responses/extendedApplication"
        400:
          $ref: "#/components/responses/dataError"
        401:
          $ref: "#/components/responses/authError"
        404:
          $ref: "#/components/responses/notFoundError"
        500:
          $ref: "#/components/responses/serverError"
      security:
        - oAuth2ClientCredentials: []

components:
  requestBodies:
    createOrderApplication:
      required: true
      description: New Application Data
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/orderApplication"

  responses:
    markAsConfirmedSuccess:
      description: Successful operation

    orderApplicationGetSuccess:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/orderApplicationGetSuccess"

    orderGetSuccess:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/orderGetSuccess"

    customerGetSuccess:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/customerGetSuccess"

    empty:
      description: Successful operation
      content:
        application/json:
          schema:
            type: object

    file:
      description: Binary file
      content:
        application/pdf:
          schema:
            type: string
            format: binary

    dataError:
      description: Invalid data
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/dataError"

    authError:
      description: Invalid authentication
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/authError"

    notFoundError:
      description: Application not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/notFoundError"

    serverError:
      description: Internal Server Error. If the problem persists contact the technical support
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/serverError"

    serviceError:
      description: Service Error. If the problem persists contact the technical support
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/serviceError"

  schemas:
    orderApplication:
      type: object
      required:
      - items
      - customerId
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/item"
        customerId:
          type: string
          description: Id of customer making the purchase
          example: "63b597c72e7e42972e5dec43"

    item:
      type: object
      required:
      - price
      - quantity
      - assetName
      properties:
        price:
          type: number
          description: Total price for all the articles, including VAT
          example: 123
        quantity:
          type: number
          description: Number of article(s)
          example: 2
        name:
          type: string
          description: Name of article
          example: Article

    orderApplicationGetSuccess:
      $ref: "#/components/schemas/application"

    orderGetSuccess:
      $ref: "#/components/schemas/order"

    customerGetSuccess:
      $ref: "#/components/schemas/customer"

    order:
      type: object
      properties:
        id:
          type: string
          description: Order id
          example: "63b597c72e7e42972e5dec23"
        transactions:
          type: array
          items:
            $ref: "#/components/schemas/transaction"
        invoices:
          type: array
          items:
            $ref: "#/components/schemas/invoice"
        debtorId:
          type: string
          description: Customer id
          example: "63b597c72e7e42972e5dec23"
        orderReferenceNumber:
          type: string
          description: Reference number of order
          example: "234578169728"
        isAccountPaid:
          type: boolean
          description: Status of if all invoices of order are paid or not
        currency:
          $ref: "#/components/schemas/currency"
        orderAmount:
          type: number
          description: Total balance of order
          example: "10000"
        createdAt:
          type: string
          description: Creation date of order
          format: date
          example: "2022-02-02"
        paymentReference:
          type: string
          description: Payment reference number of order to be used when paying order
          example: "234578169728"
        overdueDays:
          type: number
          description: Number of days the order is passed its due date
          example: "50"

    customer:
       type: object
       properties:
        id:
          type: string
          description: Order id
          example: "63b597c72e7e42972e5dec23"

    transaction:
      type: object
      properties:
        id:
          type: string
          description: Transaction id
          example: "63b597c72e7e42972e5dec23"
        createdAt:
          type: string
          description: Creation date of transaction
          format: date
          example: "2022-02-02"
        amount:
          type: number
          description: Amount of transaction
          example: "10000"
        currency:
          $ref: "#/components/schemas/currency"
        type:
          $ref: "#/components/schemas/transactionType"
        description:
          type: string
          description: Description of transaction
          example: 'Purchase amount'

    invoice:
      type: object
      properties:
        id:
          type: string
          description: Invoice id
          example: "63b597c72e7e42972e5dec23"
        createdAt:
          type: string
          description: Creation date of invoice
          format: date
          example: "2022-02-02"
        amount:
          type: number
          description: Amount of invoice
          example: "10000"
        issueDate:
          type: string
          description: Issue date of invoice
          format: date
          example: "2022-02-02"
        expiryDate:
          type: string
          description: Expiry date of invoice
          format: date
          example: "2022-04-02"
        endGracePeriod:
          type: string
          description: Grace period of invoice
          format: date
          example: "2022-04-07"
        referenceNumber:
          type: string
          description: Payment reference number of invoice to be used when paying
          example: "234578169728"
        isPaid:
          type: boolean
          description: Status of if the invoice is paid or not
        invoiceType:
          $ref: "#/components/schemas/invoiceType"
        sentAt:
          type: string
          description: Date invoice was sent to customer
          format: date
          example: "2022-04-07"

    application:
      type: object
      properties:
        id:
          type: string
          description: Application id
          example: "63b597c72e7e42972e5dec23"
        createdAt:
          type: string
          description: Creation date of application
          format: date
          example: "2022-02-02"
        applicationStep:
          $ref: "#/components/schemas/applicationStep"
        items:
          type: array
          items:
            $ref: "#/components/schemas/item"
        customerId:
          type: string
          description: Customer id
          example: "63b597c72e7e42972e5nov23"
        currency:
          $ref: "#/components/schemas/currency"
        currentDecision:
          $ref: "#/components/schemas/decision"
        decisionReason:
          type: string
          description: Reason for the automatic or manual decision taken
          example: Awaiting processing
        requestedTerms:
          $ref: "#/components/schemas/terms"
        terms:
          $ref: "#/components/schemas/terms"

    applicationStep:
      type: string
      enum:
        - created
        - approved
        - accepted
        - signed
        - confirmed
        - closed
        - expired
      default: created
      description: |
        Current status of an application.
        Possible values are
        * created -> application is created and waiting for automatic processing.
        * approved -> application has passed the automatic rules.
        * accepted -> application accepted by financer.
        * signed -> application is signed by merchant.
        * confirmed -> order is payed out.
        * closed -> application is done.
        * expired -> application is expired.

    transactionType:
      type: string
      enum:
        - fee
        - payOut
        - interest
        - payIn
        - adjustment
        - internal
      description: |
        Transaction type.
        Possible values are
        * fee -> the transaction is a fee.
        * payOut -> the transaction is a payment to a customer.
        * interst -> the transaction is capitalised interest.
        * payIn -> the transaction is a payment from a customer.
        * adjustment -> the transaction is an adjustment done by the system.
        * internal -> the transaction is an internal transaction within the system between two accounts.

    invoiceType:
      type: string
      enum:
        - invoice
        - credit-note
        - reminder
      description: |
        Invoice type.
        Possible values are
        * invoice -> the invoice is a regular invoice
        * credit-note -> the invoice is a credit note used to revert a regular invoice
        * reminder -> the invoice is a reminder for a late invoice


    currency:
      type: string
      enum:
        - NOK
        - SEK
        - EUR
      default: EUR
      description: Currency

    decision:
      type: string
      enum:
        - granted
        - referred
        - denied
        - pending
        - new
      default: pending
      description: |
        Current decision of an application.
        Possible values are
        * denied -> application is denied and no manual review is necessary.
        * referred -> application will go through manual review.
        * granted -> application is granted and no manual review is necessary.
        * pending -> application has started the automatic processing.
        * new -> application is new and has not yet started the automatic processing.

    terms:
      type: object
      properties:
        termsOfPayment:
          $ref: "#/components/schemas/termsOfPayment"

    termsOfPayment:
      type: string
      enum:
        - 30-days
        - 60-days
        - 90-days
      default: 90-days
      description: Number of repayment days

    error:
      type: object
      required:
      - status
      - message
      - errors
      properties:
        status:
          type: integer
          description: HTTP status code
        message:
          type: string
          description: Main error reason
        errors:
          type: array
          description: List of errors messages to describe the issue in more details
          items:
            type: string

    dataError:
      allOf:
        - $ref: "#/components/schemas/error"
        - type: object
          properties:
            status:
              example: 400
            message:
              example: INVALID_REQUEST
            errors:
              type: array
              items:
                example: Field ... should be defined

    authError:
      allOf:
        - $ref: "#/components/schemas/error"
        - type: object
          properties:
            status:
              example: 401
            message:
              example: Unauthorized

    notFoundError:
      allOf:
        - $ref: "#/components/schemas/error"
        - type: object
          properties:
            status:
              example: 404
            message:
              example: Application not found

    serverError:
      allOf:
        - $ref: "#/components/schemas/error"
        - type: object
          properties:
            status:
              example: 500
            message:
              example: Internal Server Error

    serviceError:
      allOf:
        - $ref: "#/components/schemas/error"
        - type: object
          properties:
            status:
              example: 503
            message:
              example: Service unavailable

  securitySchemes:
    oAuth2ClientCredentials:
      type: oauth2
      description: This API uses OAuth2
      flows:
        clientCredentials:
          tokenUrl: 'authorization/authenticate'
          scopes: {}