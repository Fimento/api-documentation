openapi: 3.0.0
info:
  title: Fimento Partner API
  version: 1.0.0
  description: |
    The Fimento Open API can be used by Fimento's partners in order to provide financial products to their end customers within their own application/website.

    # Postman collection
    <a href="./postman_collection.json" download> [Download Postman collection] </a>

    To use the collection, set the `UNAME` and `PWORD` variables in the root folder of the collection to the credentials received from Fimento.
    # Test objects
    Test objects can be used in the staging environment in order to test specific flows. If the customer has its `organisationNumber` equal to one of the test objects, the `applicationStatus` returned by Fimento for the create application endpoint will always be the same one as described in the following table:
    Organisation Number|Application Status
    ----------------------|------------------
    Undefined or anything but the below |`granted`
    2222222 |`refer`
    1111111 |`denied`
servers:
- url: https://api.fimento.com/
  description: Production server
- url: https://api.stage.fimento.com/
  description: Staging server

paths:
  /application/customer:
    post:
      tags:
      - Application endpoints
      summary: Create a customer
      description: Create a customer and return its credit information. If a customer with the defined orgNumber has already been added to the system, it returns the existing one.
      requestBody:
        $ref: "#/components/requestBodies/createCustomerApplication"
      responses:
        200:
          $ref: "#/components/responses/customerGetSuccess"
        400:
          $ref: "#/components/responses/dataError"
        401:
          $ref: "#/components/responses/authError"
        500:
          $ref: "#/components/responses/serverError"
      security:
        - oAuth2ClientCredentials: []

  /application/customer/{applicationId}:
    get:
      tags:
      - Application endpoints
      summary: Get a customer
      description: Fetch a customer
      parameters:
      - name: applicationId
        in: path
        description: Application's id
        required: true
        schema:
          type: string
      responses:
        200:
          $ref: "#/components/responses/customerGetSuccess"
        400:
          $ref: "#/components/responses/dataError"
        401:
          $ref: "#/components/responses/authError"
        404:
          $ref: "#/components/responses/notFoundError"
        500:
          $ref: "#/components/responses/serverError"
      security:
      - oAuth2ClientCredentials: []

  /application/order:
    post:
      tags:
      - Application endpoints
      summary: Create an order application
      description: Send a new application for an order to be created in the system, and run decision rules
      requestBody:
        $ref: "#/components/requestBodies/createOrderApplication"
      responses:
        200:
          $ref: "#/components/responses/orderApplicationGetSuccess"
        400:
          $ref: "#/components/responses/dataError"
        401:
          $ref: "#/components/responses/authError"
        500:
          $ref: "#/components/responses/serverError"
      security:
      - oAuth2ClientCredentials: []

  /application/order/{applicationId}/confirm:
    put:
      tags:
      - Application endpoints
      summary: Confirm an order application
      description: This endpoint can be used to notify Fimento when the customer decides to confirm an application and generate the order in Fimento system.
      parameters:
      - name: applicationId
        in: path
        description: Application's id
        required: true
        schema:
          type: string
      requestBody:
        $ref: "#/components/requestBodies/confirmOrder"
      responses:
        200:
          $ref: "#/components/responses/markAsConfirmedSuccess"
        400:
          $ref: "#/components/responses/dataError"
        401:
          $ref: "#/components/responses/authError"
        500:
          $ref: "#/components/responses/serverError"
      security:
      - oAuth2ClientCredentials: []

  /application/order/{applicationId}:
    get:
      tags:
      - Application endpoints
      summary: Get an order application
      description: Fetch an application
      parameters:
      - name: applicationId
        in: path
        description: Application's id
        required: true
        schema:
          type: string
      responses:
        200:
          $ref: "#/components/responses/orderApplicationGetSuccess"
        400:
          $ref: "#/components/responses/dataError"
        401:
          $ref: "#/components/responses/authError"
        404:
          $ref: "#/components/responses/notFoundError"
        500:
          $ref: "#/components/responses/serverError"
      security:
      - oAuth2ClientCredentials: []

  /order/{orderId}:
    get:
      tags:
      - Order endpoints
      summary: Get an order
      description: Fetch an order
      parameters:
      - name: orderId
        in: path
        description: Order's id
        required: true
        schema:
          type: string
      responses:
        200:
          $ref: "#/components/responses/orderGetSuccess"
        400:
          $ref: "#/components/responses/dataError"
        401:
          $ref: "#/components/responses/authError"
        404:
          $ref: "#/components/responses/notFoundError"
        500:
          $ref: "#/components/responses/serverError"
      security:
      - oAuth2ClientCredentials: []

  /order/{orderId}/invoice/{invoiceId}/reminder:
    post:
      tags:
      - Order endpoints
      summary: Create an invoice reminder
      parameters:
      - name: orderId
        in: path
        description: Order's id
        required: true
        schema:
          type: string
      - name: invoiceId
        in: path
        description: Invoice's id
        required: true
        schema:
          type: string
      requestBody:
        $ref: "#/components/requestBodies/reminder"
      responses:
        200:
          $ref: "#/components/responses/generateReminderSuccess"
        400:
          $ref: "#/components/responses/dataError"
        401:
          $ref: "#/components/responses/authError"
        404:
          $ref: "#/components/responses/notFoundError"
        500:
          $ref: "#/components/responses/serverError"
      security:
        - oAuth2ClientCredentials: []

  /order/{orderId}/invoice/{invoiceId}/download:
    get:
      tags:
      - Order endpoints
      summary: Get an invoice PDF
      parameters:
      - name: orderId
        in: path
        description: Order's id
        required: true
        schema:
          type: string
      - name: invoiceId
        in: path
        description: Invoice's id
        required: true
        schema:
          type: string
      responses:
        200:
          $ref: "#/components/responses/file"
        400:
          $ref: "#/components/responses/dataError"
        401:
          $ref: "#/components/responses/authError"
        404:
          $ref: "#/components/responses/notFoundError"
        500:
          $ref: "#/components/responses/serverError"
      security:
        - oAuth2ClientCredentials: []

  /order/{orderId}/return:
    post:
      tags:
      - Order endpoints
      summary: Create a return
      parameters:
      - name: orderId
        in: path
        description: Order's id
        required: true
        schema:
          type: string
      requestBody:
        $ref: "#/components/requestBodies/createReturn"
      responses:
        200:
          $ref: "#/components/responses/createReturnSuccess"
        400:
          $ref: "#/components/responses/dataError"
        401:
          $ref: "#/components/responses/authError"
        404:
          $ref: "#/components/responses/notFoundError"
        500:
          $ref: "#/components/responses/serverError"
      security:
        - oAuth2ClientCredentials: []

  /upload/payment-file:
    post:
      tags:
      - Payments
      summary: Register payments
      requestBody:
        $ref: "#/components/requestBodies/registerPayments"
      responses:
        200:
          $ref: "#/components/responses/paymentsRegistrationSummary"
        400:
          $ref: "#/components/responses/dataError"
        401:
          $ref: "#/components/responses/authError"
        404:
          $ref: "#/components/responses/notFoundError"
        500:
          $ref: "#/components/responses/serverError"
      security:
        - oAuth2ClientCredentials: []

  /order/:orderId/payment-plan:
    get:
      tags:
      - Order endpoints
      summary: Get payment plan of order
      description: Get upcoming invoices
      parameters:
      - name: orderId
        in: path
        description: Order's id
        required: true
        schema:
          type: string
      responses:
        200:
          $ref: "#/components/responses/paymentPlanGetSuccess"
        400:
          $ref: "#/components/responses/dataError"
        401:
          $ref: "#/components/responses/authError"
        404:
          $ref: "#/components/responses/notFoundError"
        500:
          $ref: "#/components/responses/serverError"
      security:
      - oAuth2ClientCredentials: []

components:
  requestBodies:
    reminder:
      required: true
      description: New Reminder Data
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/reminder"

    createOrderApplication:
      required: true
      description: New Application Data
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/orderApplication"

    createCustomerApplication:
      required: true
      description: New customer Data
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/customerApplication"

    registerPayments:
      required: true
      description: A file containing payments from one or several customers. An example of the file format can be provided on demand
      content:
        application/octet-stream:
          schema:
            type: string
            format: binary

    confirmOrder:
      required: true
      description: Data to finalise order
      content:
        application/json:
          schema:
            type: object
            properties:
              paymentMethodId:
                type: string
                description: One of the payment method id presented in the "Create an order application" response
                example: '63b597c72e7e42972e5dec23'

    createReturn:
      required: true
      description: Items to return, date of return and total amount of returned items along with a message detailing the reason for the return
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/return"


  responses:
    markAsConfirmedSuccess:
      description: Successful operation
      content:
        application/json:
          schema:
            type: object
            properties:
              orderId:
                type: string
                description: The new order Id
                example: '63b597c72e7e42972e5dec23'

    generateReminderSuccess:
      description: Sucessful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/dunning"

    orderApplicationGetSuccess:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/orderApplicationGetSuccess"

    orderGetSuccess:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/orderGetSuccess"

    customerGetSuccess:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/customerGetSuccess"

    paymentsRegistrationSummary:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/paymentsSummary"

    paymentPlanGetSuccess:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/paymentPlanGetSuccess"

    createReturnSuccess:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/createReturnSuccess"

    file:
      description: Binary file
      content:
        application/pdf:
          schema:
            type: string
            format: binary

    dataError:
      description: Invalid data
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/dataError"

    authError:
      description: Invalid authentication
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/authError"

    notFoundError:
      description: Application not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/notFoundError"

    serverError:
      description: Internal Server Error. If the problem persists contact the technical support
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/serverError"

  schemas:
    reminder:
      type: object
      properties:
        feeAmount:
          type: number
          description: Reminder fee amount
          example: 100
        termsOfPayment:
          type: number
          description: Number of days the customer has to pay the reminder
          example: 7
        reminderType:
          type: string
          enum:
            - reminder
            - debt-collection
            - late

    orderApplication:
      type: object
      required:
      - items
      - customerId
      - currency
      - reference
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/item"
        customerId:
          type: string
          description: Id of customer making the purchase
          example: "63b597c72e7e42972e5dec43"
        currency:
          $ref: "#/components/schemas/currency"
        reference:
          type: string
          description: Unique reference/identifier for the order that is communicated to the customer
          example: 'A fancy reference'

    item:
      type: object
      required:
      - price
      - quantity
      - name
      - vatPercentage
      - unit
      properties:
        price:
          type: number
          description: Total price for all the items, including VAT
          example: 123
        quantity:
          type: number
          description: Number of item(s)
          example: 2
        unit:
          type: string
          description: Unit for the quantity of the item.
          example: kg
        name:
          type: string
          description: Name of item
          example: Article
        vatPercentage:
          type: number
          description: Percentage of VAT applied on the item
          example: 25

    customerApplication:
      type: object
      required:
      - organisationNumber
      - country
      - alias
      - name
      - creditLimit
      - currency
      properties:
        organisationNumber:
          type: string
          description: National identifier of the customer
          example: "5566778899"
        country:
          type: string
          format: ISO 3166-1 alpha-2
          description: Country of the customer
          example: NO
        name:
          type: string
          description: Customer's name
          example: A fancy customer HIFI Electronics AB
        alias:
          type: string
          description: Customer's alias for a different nomination than the official one for the customer
          example: A fancy customer
        creditLimit:
          type: number
          description: The credit limit wished for this customer
          example: 20000
        currency:
          $ref: "#/components/schemas/currency"

    return:
      type: object
      required:
      - items
      - message
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/returnItems"
        message:
          type: string
          description: Additional message
          example: Returning one computer

    orderApplicationGetSuccess:
      type: object
      properties:
        id:
          type: string
          description: Application id
          example: "63b597c72e7e42972e5dec23"
        pricing:
          type: array
          items:
            type: object
            required:
              - paymentMethod
              - amount
              - termsOfPayment
            properties:
              id:
                type: string
                description: Payment method id
                example: "63b597c72e7e42972e5dec23"
              paymentMethod:
                type: string
                description: |
                  Type of payment method.
                  Possible values are
                  * single-invoice -> The order total amount will be invoiced all at once.
                  * instalments -> The order will be recuringly invoiced over a period of time
                example: 'single-invoice'
              amount:
                type: number
                description: Total debt to be repaid
                example: 5000
              nominalRate:
                type: number
                description: Yearly interest rate, in percent
                example: 10
              termsOfPayment:
                type: number
                description: Number of days before the invoice expires. Fixed to 30 days at the moment
                example: 30
              numberOfInstalments:
                type: number
                description: Number of payments expected to repay the debt
                example: 6
              annuityAmount:
                type: number
                description: Reccuring amount to paid to repay the full debt
                example: 926
              startupFee:
                type: number
                description: Fee amount to include in the annuity calculation
                example: 395
        articles:
          type: array
          items:
            $ref: "#/components/schemas/article"

        decisionData:
          $ref: "#/components/schemas/decisionData"

    orderGetSuccess:
      $ref: "#/components/schemas/order"

    paymentPlanGetSuccess:
      type: array
      items:
        $ref: "#/components/schemas/paymentPlanInvoice"

    customerGetSuccess:
      type: object
      properties:
        id:
          type: string
          description: Application id
          example: "63b597c72e7e42972e5dec23"
        customerId:
          type: string
          description: Customer Id
          example: 63b597c72e7e42972e5dec23
        creditLimit:
          type: number
          description: Credit limit for this customer set by the system after running credit rules
          example: 20000
        decisionData:
          $ref: "#/components/schemas/decisionData"
        utilisedCreditLimit:
          type: number
          description: Credit limit amount already utilised by customer
          example: 0


    paymentsSummary:
      type: object
      properties:
        success:
          type: array
          items:
            type: string
        info:
          type: array
          items:
            type: string
        warning:
          type: array
          items:
            type: string
        error:
          type: array
          items:
            type: string

    createReturnSuccess:
      type: object
      properties:
        items:
          type: array
          description: list of returned articles
          items:
            $ref: "#/components/schemas/return"
        date:
          type: string
          description: Date of return
          format: date
          example: "2022-02-02"
        transactionId:
          type: string
          description: Transaction id of return
          example: "63b597c72e7e42972e5dec23"

    returnItems:
      type: object
      required:
      - articleId
      - quantity
      - amount
      - description
      properties:
        articleId:
          type: string
          description: Id of article to return
          example: '63b597c72e7e42972e5dec23'
        quantity:
          type: number
          description: Number of articles returned
          example: 1
        amount:
          type: number
          description: Total price of all returned articles
          example: 5000
        description:
          type: string
          example: Broken screen
          description: Return reason for this article

    order:
      type: object
      properties:
        id:
          type: string
          description: Order id
          example: "63b597c72e7e42972e5dec23"
        transactions:
          type: array
          items:
            $ref: "#/components/schemas/transaction"
        invoices:
          type: array
          items:
            $ref: "#/components/schemas/invoice"
        debtorId:
          type: string
          description: Customer id
          example: "63b597c72e7e42972e5dec23"
        orderReferenceNumber:
          type: string
          description: Reference number of order
          example: "234578169728"
        accountStatus:
          type: boolean
          description: Status of order
          enum:
          - pending
          - paid
          - late
          - waiting-for-payment
        currency:
          $ref: "#/components/schemas/currency"
        orderAmount:
          type: number
          description: Total amount of the order
          example: "10000"
        paymentReference:
          type: string
          description: Payment reference number of order to be used when paying order
          example: "234578169728"
        overdueDays:
          type: number
          description: Number of days the order is passed its due date
          example: "50"
        pendingInterest:
          type: number
          description: Total pending/non-capitalised interest of the order
          example: 20
        activationDate:
          type: string
          description: Delivery date of order
          format: date
          example: "2022-02-02"
        articles:
          type: array
          items:
            $ref: "#/components/schemas/articleOfOrder"
    
    

    customer:
      type: object
      properties:
      id:
        type: string
        description: Customer id
        example: "63b597c72e7e42972e5dec23"
    
    article:
      type: object
      properties:
        price:
          type: number
          description: Total price for all the items, including VAT
        quantity:
          type: number
          description: Number of item(s)
        description:
          type: string
          description: Description of the item

    articleOfOrder:
      type: object
      properties:
        _id:
          type: string
          description: Article id
          example: "63ef87c26a869f1556de1252"
        price:
          type: number
          description: Total price for all the items, including VAT
        quantity:
          type: number
          description: Number of item(s)
        description:
          type: string
          description: Description of the item


    transaction:
      type: object
      properties:
        id:
          type: string
          description: Transaction id
          example: "63b597c72e7e42972e5dec23"
        createdAt:
          type: string
          description: Creation date of transaction
          format: date
          example: "2022-02-02"
        amount:
          type: number
          description: Amount of transaction
          example: "10000"
        currency:
          $ref: "#/components/schemas/currency"
        type:
          $ref: "#/components/schemas/transactionType"
        description:
          type: string
          description: Description of transaction
          example: 'Purchase amount'

    invoice:
      type: object
      properties:
        id:
          type: string
          description: Invoice id
          example: "63b597c72e7e42972e5dec23"
        createdAt:
          type: string
          description: Creation date of invoice
          format: date
          example: "2022-02-02"
        amount:
          type: number
          description: Amount of invoice
          example: "10000"
        issueDate:
          type: string
          description: Issue date of invoice
          format: date
          example: "2022-02-02"
        expiryDate:
          type: string
          description: Expiry date of invoice
          format: date
          example: "2022-04-02"
        endGracePeriod:
          type: string
          description: Grace period of invoice
          format: date
          example: "2022-04-07"
        referenceNumber:
          type: string
          description: Payment reference number of invoice to be used when paying
          example: "234578169728"
        isPaid:
          type: boolean
          description: Status of if the invoice is paid or not
        sentAt:
          type: string
          description: Date invoice was sent to customer
          format: date
          example: "2022-04-07"
        status:
          $ref: "#/components/schemas/invoiceStatus"
        dunning:
          type: array
          description: "List of reminders and fees in case of late payment of the invoice"
          items:
            $ref: "#/components/schemas/dunning"
        creditInvoices:
          type: array
          description: "List of credit invoices"
          items:
            $ref: "#/components/schemas/creditInvoice"

    creditInvoice: 
      type: object
      properties:
        amount:
          type: number
          description: Amount of the credit invoice
        date:
          type: string
          format: date
          description: Registration date of the credit invoice
        referenceNumber: 
          type: string
          description: Payment reference number of invoice
        pdfGeneratedAt:
          type: string
          format: date
          description: PDF generation date
        sentAt:
          type: string
          format: date
          description: Date when the pdf has been sent out


    dunning:
      type: object
      properties:
        fee:
          type: object
          properties:
            transactionIds:
              type: array
              description: Transactions corresponding to the the fee
              items:
                type: string
                example: "63da375f0043292df2fd2982"
            amount:
              type: number
              description: "Reminder fee amount"
              example: 60
        _id:
          type: string
          example: "63da37e01a786fc1b70ed884"
        issueDate:
          type: string
          description: "Reminder expiry date"
          format: date
          example: "2022-04-08"
        expiryDate:
          type: string
          description: "Reminder issue date"
          format: date
          example: "2022-04-22"
        endGracePeriod:
          type: string
          description: "Reminder end grace period date"
          format: date
          example: "2022-04-27"

    paymentPlanInvoice:
      type: object
      properties:
        amount:
          type: number
          description: Amount of invoice
          example: "10000"
        issueDate:
          type: string
          description: Issue date of invoice
          format: date
          example: "2022-02-02"
        expiryDate:
          type: string
          description: Expiry date of invoice
          format: date
          example: "2022-04-02"
        endGracePeriod:
          type: string
          description: Grace period of invoice
          format: date
          example: "2022-04-07"

    decisionData:
      type: object
      properties:
        finalDecision:
          $ref: "#/components/schemas/decision"
        decisionDetails:
          type: array
          description: List of descriptions that lead the engine to the final decision
          items:
            type: string
            description: Description
            example: Automatic grant

    invoiceStatus:
      type: string
      enum:
        - paid
        - waiting-for-payment
        - not-invoiced
        - late
      description: |
        Invoice status.
        Possible values are
        * paid -> the invoice is fully paid
        * waiting-for-payment -> the invoice is sent, is not late and not fully paid
        * not-invoiced -> the invoice has not been sent to the customer
        * late -> the invoice is late

    transactionType:
      type: string
      enum:
        - fee
        - payOut
        - interest
        - payIn
        - adjustment
        - internal
      description: |
        Transaction type.
        Possible values are
        * fee -> the transaction is a fee.
        * payOut -> the transaction is a payment to a customer.
        * interest -> the transaction is capitalised interest.
        * payIn -> the transaction is a payment from a customer.
        * adjustment -> the transaction is an adjustment done by the system.
        * internal -> the transaction is an internal transaction within the system between two accounts.


    currency:
      type: string
      format: ISO 4217
      description: Currency of the credit limit and other amounts related to this customer
      example: NOK

    decision:
      type: string
      enum:
        - granted
        - referred
        - denied
        - pending
        - new
      description: |
        Current decision of an application.
        Possible values are
        * denied -> application is denied and no manual review is necessary.
        * referred -> application will go through manual review.
        * granted -> application is granted and no manual review is necessary.
        * pending -> application has started the automatic processing.
        * new -> application is new and has not yet started the automatic processing.

    error:
      type: object
      required:
      - status
      - message
      - errors
      properties:
        status:
          type: integer
          description: HTTP status code
        message:
          type: string
          description: Main error reason
        errors:
          type: array
          description: List of errors messages to describe the issue in more details
          items:
            type: string

    dataError:
      allOf:
        - $ref: "#/components/schemas/error"
        - type: object
          properties:
            status:
              example: 400
            message:
              example: INVALID_REQUEST
            errors:
              type: array
              items:
                example: Field ... should be defined

    authError:
      allOf:
        - $ref: "#/components/schemas/error"
        - type: object
          properties:
            status:
              example: 401
            message:
              example: Unauthorized

    notFoundError:
      allOf:
        - $ref: "#/components/schemas/error"
        - type: object
          properties:
            status:
              example: 404
            message:
              example: Not found

    serverError:
      allOf:
        - $ref: "#/components/schemas/error"
        - type: object
          properties:
            status:
              example: 500
            message:
              example: Internal Server Error

  securitySchemes:
    oAuth2ClientCredentials:
      type: oauth2
      description: This API uses OAuth2
      flows:
        clientCredentials:
          tokenUrl: 'authorization/authenticate'
          scopes: {}